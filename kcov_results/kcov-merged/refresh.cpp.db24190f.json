var data = {lines:[
{"lineNum":"    1","line":"#include \"handt.h\""},
{"lineNum":"    2","line":"#include <algorithm>"},
{"lineNum":"    3","line":"#include <iostream>"},
{"lineNum":"    4","line":"#include <sstream>"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"int main() {","class":"lineCov","hits":"1",},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"  std::stringstream out;","class":"lineCov","hits":"1",},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"  // Get recent prices"},
{"lineNum":"   11","line":"  const auto &prices = handt::get_prices();","class":"lineCov","hits":"1",},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"  // Get current positions"},
{"lineNum":"   14","line":"  const auto &positions = handt::get_positions();","class":"lineCov","hits":"1",},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"  // Lambda to search for a symbol in the recent prices"},
{"lineNum":"   17","line":"  auto find_prices = [&prices](const std::string symbol) {","class":"lineCov","hits":"1",},
{"lineNum":"   18","line":"    const auto it ="},
{"lineNum":"   19","line":"        std::find_if(prices.cbegin(), prices.cend(),","class":"lineCov","hits":"1",},
{"lineNum":"   20","line":"                     [symbol](const auto p) { return p.symbol == symbol; });","class":"lineCov","hits":"1",},
{"lineNum":"   21","line":"    return it != prices.cend() ? it->series : std::vector<double>();","class":"lineCov","hits":"1",},
{"lineNum":"   22","line":"  };","class":"lineNoCov","hits":"0",},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"  // Copy existing positions into a new container, updating the prices if they"},
{"lineNum":"   25","line":"  // are available"},
{"lineNum":"   26","line":"  std::decay_t<decltype(positions)> updated_positions;","class":"lineCov","hits":"1",},
{"lineNum":"   27","line":"  std::transform(positions.cbegin(), positions.cend(),","class":"lineCov","hits":"1",},
{"lineNum":"   28","line":"                 std::back_inserter(updated_positions),","class":"lineCov","hits":"1",},
{"lineNum":"   29","line":"                 [&find_prices, &out](const auto p) {","class":"lineCov","hits":"1",},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"                   // Create a copy of the position"},
{"lineNum":"   32","line":"                   std::decay_t<decltype(p)> pos(p);","class":"lineCov","hits":"1",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"                   // If the position is open then try to find some prices,"},
{"lineNum":"   35","line":"                   // update the position and return it"},
{"lineNum":"   36","line":"                   if (p.open) {","class":"lineCov","hits":"1",},
{"lineNum":"   37","line":"                     const auto q = find_prices(p.symbol);","class":"lineCov","hits":"1",},
{"lineNum":"   38","line":"                     if (!q.empty()) {","class":"lineCov","hits":"1",},
{"lineNum":"   39","line":"                       pos.sell_price = q.back();","class":"lineCov","hits":"1",},
{"lineNum":"   40","line":"                       pos.status = \"refreshd\";","class":"lineCov","hits":"1",},
{"lineNum":"   41","line":"                     }","class":"lineCov","hits":"1",},
{"lineNum":"   42","line":"                   }","class":"lineNoCov","hits":"0",},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"                   return pos;","class":"lineCov","hits":"1",},
{"lineNum":"   45","line":"                 });","class":"lineCov","hits":"1",},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"  // Calculate total prices processed and store it"},
{"lineNum":"   48","line":"  const auto total_prices_processed = prices.size() + handt::get_stats();","class":"lineCov","hits":"1",},
{"lineNum":"   49","line":"  handt::put_stats(total_prices_processed);","class":"lineCov","hits":"1",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"  // Print all positions"},
{"lineNum":"   52","line":"  for (const auto position : updated_positions)","class":"lineCov","hits":"1",},
{"lineNum":"   53","line":"    out << position << \"\\n\";","class":"lineCov","hits":"1",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"  out << \"# \" << prices.size() << \" prices this iteration\\n\";","class":"lineCov","hits":"1",},
{"lineNum":"   56","line":"  out << \"# \" << total_prices_processed << \" total prices processed\\n\";","class":"lineCov","hits":"1",},
{"lineNum":"   57","line":"  out << \"# \" << updated_positions.size() << \" positions\\n\";","class":"lineCov","hits":"1",},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"  std::cout << out.str();","class":"lineCov","hits":"1",},
{"lineNum":"   60","line":"}","class":"lineCov","hits":"1",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "review.o", "date" : "2018-04-21 09:24:27", "instrumented" : 32, "covered" : 30,};
var merged_data = [];
