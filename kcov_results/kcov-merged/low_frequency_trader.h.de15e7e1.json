var data = {lines:[
{"lineNum":"    1","line":"// Trading strategy routines"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"#ifndef LOW_FREQUENCY_TRADER_H"},
{"lineNum":"    4","line":"#define LOW_FREQUENCY_TRADER_H"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#include <algorithm>"},
{"lineNum":"    7","line":"#include <functional>"},
{"lineNum":"    8","line":"#include <numeric>"},
{"lineNum":"    9","line":"#include <string>"},
{"lineNum":"   10","line":"#include <vector>"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"namespace lft {"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"// Parameteric aliases to make the strategy definitions cleaner"},
{"lineNum":"   15","line":"using result = std::pair<std::string, bool>;"},
{"lineNum":"   16","line":"using series = const std::vector<double>;"},
{"lineNum":"   17","line":"using param = const double &;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"// Helper routines used to define strategies"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"double AVERAGE(series s) {","class":"lineCov","hits":"1",},
{"lineNum":"   22","line":"  return !s.empty()","class":"lineCov","hits":"1",},
{"lineNum":"   23","line":"             ? accumulate(s.cbegin(), s.cend(), 0.0,","class":"lineCov","hits":"1",},
{"lineNum":"   24","line":"                          [](auto &sum, const auto &i) { return sum + i; }) /","class":"lineCov","hits":"1",},
{"lineNum":"   25","line":"                   s.size()","class":"lineCov","hits":"1",},
{"lineNum":"   26","line":"             : 0.0;"},
{"lineNum":"   27","line":"}"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"// Average of the oldest half of the series"},
{"lineNum":"   30","line":"double DISTANT_AVERAGE(series s) {","class":"lineCov","hits":"1",},
{"lineNum":"   31","line":"  const unsigned long mid_point = s.size() / 2;","class":"lineCov","hits":"1",},
{"lineNum":"   32","line":"  const std::vector<double> subset(s.cbegin(), next(s.cbegin(), mid_point));","class":"lineCov","hits":"1",},
{"lineNum":"   33","line":"  return AVERAGE(subset);","class":"lineCov","hits":"1",},
{"lineNum":"   34","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"// Average of the recent half of the series"},
{"lineNum":"   37","line":"double RECENT_AVERAGE(series s) {","class":"lineCov","hits":"1",},
{"lineNum":"   38","line":"  const unsigned long mid_point = s.size() / 2;","class":"lineCov","hits":"1",},
{"lineNum":"   39","line":"  const std::vector<double> subset(s.crbegin(), next(s.crbegin(), mid_point));","class":"lineCov","hits":"1",},
{"lineNum":"   40","line":"  return AVERAGE(subset);","class":"lineCov","hits":"1",},
{"lineNum":"   41","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"std::string NAME(const std::string n, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"   44","line":"  return std::to_string(p).substr(0, 4) + \"_\" + n;","class":"lineCov","hits":"1",},
{"lineNum":"   45","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"double THRESHOLD(param p) { return (100.0 + p) / 100.0; }","class":"lineCov","hits":"1",},
{"lineNum":"   48","line":"double SPOT(series s) { return (!s.empty() ? s.back() : 1.0); }","class":"lineCov","hits":"1",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"// The strategies"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"result flicking_down(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"   53","line":"  const auto name = NAME(\"flicking_down\", p);","class":"lineCov","hits":"1",},
{"lineNum":"   54","line":"  const bool exec = AVERAGE(s) / SPOT(s) > THRESHOLD(p);","class":"lineCov","hits":"1",},
{"lineNum":"   55","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"   56","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"result flicking_up(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"   59","line":"  const auto name = NAME(\"flicking_up\", p);","class":"lineCov","hits":"1",},
{"lineNum":"   60","line":"  const bool exec = SPOT(s) / AVERAGE(s) > THRESHOLD(p);","class":"lineCov","hits":"1",},
{"lineNum":"   61","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"   62","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"result stepping_up(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"   65","line":"  const auto name = NAME(\"stepping_up\", p);","class":"lineCov","hits":"1",},
{"lineNum":"   66","line":"  const bool exec = RECENT_AVERAGE(s) / DISTANT_AVERAGE(s) > THRESHOLD(p);","class":"lineCov","hits":"1",},
{"lineNum":"   67","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"   68","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"result stepping_down(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"   71","line":"  const auto name = NAME(\"stepping_down\", p);","class":"lineCov","hits":"1",},
{"lineNum":"   72","line":"  const bool exec = DISTANT_AVERAGE(s) / RECENT_AVERAGE(s) > THRESHOLD(p);","class":"lineCov","hits":"1",},
{"lineNum":"   73","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"   74","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"result rolling_average(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"   77","line":"  const auto name = NAME(\"roll_average\", p);","class":"lineCov","hits":"1",},
{"lineNum":"   78","line":"  const unsigned long length = 10;","class":"lineCov","hits":"1",},
{"lineNum":"   79","line":"  const double average =","class":"lineCov","hits":"1",},
{"lineNum":"   80","line":"      std::accumulate(s.crbegin(), next(s.crbegin(), length), 0.0) / length;","class":"lineCov","hits":"1",},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"  const bool exec = SPOT(s) / average > THRESHOLD(p);","class":"lineCov","hits":"1",},
{"lineNum":"   83","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"   84","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"result rolling_average2(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"   87","line":"  const auto name = NAME(\"roll_average2\", p);","class":"lineCov","hits":"1",},
{"lineNum":"   88","line":"  const unsigned long length = 100;","class":"lineCov","hits":"1",},
{"lineNum":"   89","line":"  const double average =","class":"lineCov","hits":"1",},
{"lineNum":"   90","line":"      std::accumulate(s.crbegin(), next(s.crbegin(), length), 0.0) / length;","class":"lineCov","hits":"1",},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"  const bool exec = SPOT(s) / average > THRESHOLD(p);","class":"lineCov","hits":"1",},
{"lineNum":"   93","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"   94","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"result rolling_average3(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"   97","line":"  const auto name = NAME(\"roll_average3\", p);","class":"lineCov","hits":"1",},
{"lineNum":"   98","line":"  const unsigned long length = 50;","class":"lineCov","hits":"1",},
{"lineNum":"   99","line":"  const double average =","class":"lineCov","hits":"1",},
{"lineNum":"  100","line":"      std::accumulate(s.crbegin(), next(s.crbegin(), length), 0.0) / length;","class":"lineCov","hits":"1",},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"  const bool exec = SPOT(s) / average > THRESHOLD(p);","class":"lineCov","hits":"1",},
{"lineNum":"  103","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"  104","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"result rolling_average4(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"  107","line":"  const auto name = NAME(\"roll_average4\", p);","class":"lineCov","hits":"1",},
{"lineNum":"  108","line":"  const unsigned long length = 200;","class":"lineCov","hits":"1",},
{"lineNum":"  109","line":"  const double average =","class":"lineCov","hits":"1",},
{"lineNum":"  110","line":"      std::accumulate(s.crbegin(), next(s.crbegin(), length), 0.0) / length;","class":"lineCov","hits":"1",},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  const bool exec = SPOT(s) / average > THRESHOLD(p);","class":"lineCov","hits":"1",},
{"lineNum":"  113","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"  114","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"result average_inter(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"  117","line":"  const auto name = NAME(\"average_inter\", p);","class":"lineCov","hits":"1",},
{"lineNum":"  118","line":"  const unsigned long filter1 = s.size() / 3;","class":"lineCov","hits":"1",},
{"lineNum":"  119","line":"  const unsigned long filter2 = s.size() / 2;","class":"lineCov","hits":"1",},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"  // Small window average"},
{"lineNum":"  122","line":"  const double short_average =","class":"lineCov","hits":"1",},
{"lineNum":"  123","line":"      std::accumulate(s.crbegin(), next(s.crbegin(), filter1), 0.0) / filter1;","class":"lineCov","hits":"1",},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"  // Longer window average"},
{"lineNum":"  126","line":"  const double long_average =","class":"lineCov","hits":"1",},
{"lineNum":"  127","line":"      std::accumulate(s.crbegin(), next(s.crbegin(), filter2), 0.0) / filter2;","class":"lineCov","hits":"1",},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"  const bool exec = short_average / long_average > THRESHOLD(p);","class":"lineCov","hits":"1",},
{"lineNum":"  130","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"  131","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"result average_compare(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"  134","line":"  const auto name = NAME(\"average_comp\", p);","class":"lineCov","hits":"1",},
{"lineNum":"  135","line":"  const bool exec = RECENT_AVERAGE(s) / AVERAGE(s) > THRESHOLD(p);","class":"lineCov","hits":"1",},
{"lineNum":"  136","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"  137","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"result ski_jumping(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"  140","line":"  const auto name = NAME(\"ski_jumping\", p);","class":"lineCov","hits":"1",},
{"lineNum":"  141","line":"  const bool exec = stepping_down(s, p).second && flicking_up(s, p).second;","class":"lineCov","hits":"1",},
{"lineNum":"  142","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"  143","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"result old_above_new(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"  146","line":"  const auto name = NAME(\"old_above_new\", p);","class":"lineCov","hits":"1",},
{"lineNum":"  147","line":"  const bool exec = s.front() / s.back() > THRESHOLD(p);","class":"lineCov","hits":"1",},
{"lineNum":"  148","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"  149","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"result new_above_old(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"  152","line":"  const auto name = NAME(\"new_above_old\", p);","class":"lineCov","hits":"1",},
{"lineNum":"  153","line":"  const bool exec = s.back() / s.front() > THRESHOLD(p);","class":"lineCov","hits":"1",},
{"lineNum":"  154","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"  155","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"result steady_riser(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"  158","line":"  const auto name = NAME(\"steady_riser\", p);","class":"lineCov","hits":"1",},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"  // Check if the next value is larger than the current"},
{"lineNum":"  161","line":"  unsigned long trend = 0;","class":"lineCov","hits":"1",},
{"lineNum":"  162","line":"  for (auto i = s.cbegin(); i != std::prev(s.cend()); ++i)","class":"lineCov","hits":"1",},
{"lineNum":"  163","line":"    if (*i < *std::next(i))","class":"lineCov","hits":"1",},
{"lineNum":"  164","line":"      ++trend;","class":"lineCov","hits":"1",},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"  // Execute if a significant proportion of intervals are increasing"},
{"lineNum":"  167","line":"  const bool exec = trend > (s.size() / 2) + p;","class":"lineCov","hits":"1",},
{"lineNum":"  168","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"  169","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"result steady_rising2(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"  172","line":"  const auto name = NAME(\"steady_rising2\", p);","class":"lineCov","hits":"1",},
{"lineNum":"  173","line":"  const bool a = steady_riser(s, p).second;","class":"lineCov","hits":"1",},
{"lineNum":"  174","line":"  const bool b = new_above_old(s, p).second;","class":"lineCov","hits":"1",},
{"lineNum":"  175","line":"  const bool exec = a && b;","class":"lineCov","hits":"1",},
{"lineNum":"  176","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"  177","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"result kosovich(series s, param p) {","class":"lineCov","hits":"1",},
{"lineNum":"  180","line":"  const auto name = NAME(\"koskosovich\", p);","class":"lineCov","hits":"1",},
{"lineNum":"  181","line":"  const double high = *std::max_element(s.cbegin(), std::prev(s.cend()));","class":"lineCov","hits":"1",},
{"lineNum":"  182","line":"  const bool exec = SPOT(s) / (high > 0 ? high : 1) > THRESHOLD(p);","class":"lineCov","hits":"1",},
{"lineNum":"  183","line":"  return result(name, exec);","class":"lineCov","hits":"1",},
{"lineNum":"  184","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"result steady_down(series s, param p) {","class":"lineNoCov","hits":"0",},
{"lineNum":"  187","line":"  const auto name = NAME(\"steady_down\", p);","class":"lineNoCov","hits":"0",},
{"lineNum":"  188","line":"  const bool exec = flicking_down(s, p).second && steady_riser(s, p).second;","class":"lineNoCov","hits":"0",},
{"lineNum":"  189","line":"  return result(name, exec);","class":"lineNoCov","hits":"0",},
{"lineNum":"  190","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"bool preflight_check(series s) {","class":"lineCov","hits":"1",},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"  // Ensure there\'s a bit of activity"},
{"lineNum":"  195","line":"  auto unique_values(s);","class":"lineCov","hits":"1",},
{"lineNum":"  196","line":"  std::sort(unique_values.begin(), unique_values.end());","class":"lineCov","hits":"1",},
{"lineNum":"  197","line":"  const auto last = std::unique(unique_values.begin(), unique_values.end());","class":"lineCov","hits":"1",},
{"lineNum":"  198","line":"  unique_values.erase(last, unique_values.end());","class":"lineCov","hits":"1",},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"  return unique_values.size() > 100;","class":"lineCov","hits":"1",},
{"lineNum":"  201","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"// Return a list of the strategy names that reported \"buy\" for the series of"},
{"lineNum":"  204","line":"// prices given"},
{"lineNum":"  205","line":"auto run_strategies(series s) {","class":"lineCov","hits":"1",},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"  // Return potential prospects"},
{"lineNum":"  208","line":"  std::vector<std::string> prospects;","class":"lineCov","hits":"1",},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"  // Perform some initial checks to assess viability of series"},
{"lineNum":"  211","line":"  if (preflight_check(s)) {","class":"lineCov","hits":"1",},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    // Create a library of strategies"},
{"lineNum":"  214","line":"    const std::vector<std::function<result(series, param)>> library{","class":"lineCov","hits":"1",},
{"lineNum":"  215","line":"        flicking_down,    flicking_up,      ski_jumping,      stepping_up,","class":"lineCov","hits":"1",},
{"lineNum":"  216","line":"        stepping_down,    steady_riser,     kosovich,         rolling_average,","class":"lineCov","hits":"1",},
{"lineNum":"  217","line":"        rolling_average2, rolling_average3, rolling_average4, old_above_new,","class":"lineCov","hits":"1",},
{"lineNum":"  218","line":"        new_above_old,    average_inter,    average_compare,  steady_rising2};","class":"lineCov","hits":"1",},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"    // Test each strategy with a set of thresholds"},
{"lineNum":"  221","line":"    for (const auto &buy : library) {","class":"lineCov","hits":"1",},
{"lineNum":"  222","line":"      for (const auto &t : {5.0, 10.0, 20.0, 30.0}) {","class":"lineCov","hits":"1",},
{"lineNum":"  223","line":"        const auto b = buy(s, t);","class":"lineCov","hits":"1",},
{"lineNum":"  224","line":"        if (b.second)","class":"lineCov","hits":"1",},
{"lineNum":"  225","line":"          prospects.push_back(b.first);","class":"lineCov","hits":"1",},
{"lineNum":"  226","line":"      }","class":"lineNoCov","hits":"0",},
{"lineNum":"  227","line":"    }"},
{"lineNum":"  228","line":"  }","class":"lineCov","hits":"1",},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"  return prospects;","class":"lineCov","hits":"1",},
{"lineNum":"  231","line":"}","class":"lineCov","hits":"1",},
{"lineNum":"  232","line":"}"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "review.o", "date" : "2018-04-20 13:23:54", "instrumented" : 154, "covered" : 147,};
var merged_data = [];
