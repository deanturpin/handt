var data = {lines:[
{"lineNum":"    1","line":"#ifndef HANDT_H"},
{"lineNum":"    2","line":"#define HANDT_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include <chrono>"},
{"lineNum":"    5","line":"#include <fstream>"},
{"lineNum":"    6","line":"#include <iomanip>"},
{"lineNum":"    7","line":"#include <istream>"},
{"lineNum":"    8","line":"#include <iterator>"},
{"lineNum":"    9","line":"#include <map>"},
{"lineNum":"   10","line":"#include <ostream>"},
{"lineNum":"   11","line":"#include <string>"},
{"lineNum":"   12","line":"#include <vector>"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"namespace handt {"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"const double sell_threshold = 1.08;"},
{"lineNum":"   17","line":"const double cut_losses_threshold = 0.70;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"// Timestamp when a position is opened"},
{"lineNum":"   20","line":"unsigned long get_timestamp() {","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   21","line":"  return static_cast<unsigned long>(","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   22","line":"      std::chrono::duration_cast<std::chrono::seconds>(","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   23","line":"          std::chrono::system_clock::now().time_since_epoch())","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   24","line":"          .count());","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   25","line":"}"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"// A stucture to represent a trade"},
{"lineNum":"   28","line":"struct position {","class":"linePartCov","hits":"8","possible_hits":"11",},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"  // Initialise position"},
{"lineNum":"   31","line":"  std::string symbol = \"sym\";","class":"linePartCov","hits":"1","possible_hits":"4",},
{"lineNum":"   32","line":"  unsigned long timestamp = get_timestamp();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   33","line":"  double buy_price = 0.0;","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   34","line":"  double sell_price = 0.0;","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   35","line":"  std::string strategy = \"strategy\";","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"   36","line":"  std::string status = \"NEWTRADE\";","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"   37","line":"  bool open = true;","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"  // Streaming in"},
{"lineNum":"   40","line":"  friend std::istream &operator>>(std::istream &is, position &p) {","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   41","line":"    return is >> p.symbol >> p.strategy >> p.status >> p.buy_price >>","class":"linePartCov","hits":"3","possible_hits":"4",},
{"lineNum":"   42","line":"           p.sell_price >> p.timestamp >> std::boolalpha >> p.open;","class":"lineCov","hits":"2","possible_hits":"2",},
{"lineNum":"   43","line":"  }"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"  // Streaming out"},
{"lineNum":"   46","line":"  friend std::ostream &operator<<(std::ostream &os, const position &p) {","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   47","line":"    os.precision(10);","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   48","line":"    return os << std::fixed << p.symbol << \'\\t\' << p.strategy << \'\\t\'","class":"linePartCov","hits":"2","possible_hits":"3",},
{"lineNum":"   49","line":"              << p.status << \' \' << p.buy_price << \' \' << p.sell_price << \' \'","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   50","line":"              << p.timestamp << \' \' << std::boolalpha << p.open;","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   51","line":"  }"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"  double yield() const {","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   54","line":"    return buy_price > 0.0 ? sell_price / buy_price : 0.0;","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   55","line":"  }"},
{"lineNum":"   56","line":"};"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"// A prospect has a name, an initial price and a list of strategies that"},
{"lineNum":"   59","line":"// triggered the prospect"},
{"lineNum":"   60","line":"struct prospect {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   61","line":"  std::string symbol;"},
{"lineNum":"   62","line":"  double spot;"},
{"lineNum":"   63","line":"  std::vector<std::string> strategies;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"  friend std::istream &operator>>(std::istream &is, prospect &p) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"    is >> p.symbol >> p.spot;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"    std::copy(std::istream_iterator<std::string>(is),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   68","line":"              std::istream_iterator<std::string>(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"              std::back_inserter(p.strategies));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":"    return is;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"};"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"// A coin has a name and a series of prices"},
{"lineNum":"   75","line":"struct coin {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   76","line":"  std::string symbol;"},
{"lineNum":"   77","line":"  std::vector<double> series;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"  friend std::istream &operator>>(std::istream &is, coin &p) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"    is >> p.symbol;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"    std::copy(std::istream_iterator<double>(is),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   82","line":"              std::istream_iterator<double>(), std::back_inserter(p.series));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"    return is;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"  }"},
{"lineNum":"   85","line":"};"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"// Generic routine to extract a series of objects from a file and populate a"},
{"lineNum":"   88","line":"// container"},
{"lineNum":"   89","line":"template <typename Object> auto get_objects(const std::string file) {","class":"linePartCov","hits":"1","possible_hits":"5",},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"  // Declare object to be returned"},
{"lineNum":"   92","line":"  std::vector<Object> objects;","class":"linePartCov","hits":"1","possible_hits":"5",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"  // Step through each line extracting the object and pushing onto a container,"},
{"lineNum":"   95","line":"  // unless the line starts with a comment character then skip it"},
{"lineNum":"   96","line":"  std::ifstream in(file);","class":"linePartCov","hits":"1","possible_hits":"5",},
{"lineNum":"   97","line":"  std::string line;","class":"linePartCov","hits":"1","possible_hits":"5",},
{"lineNum":"   98","line":"  while (getline(in, line))","class":"linePartCov","hits":"2","possible_hits":"10",},
{"lineNum":"   99","line":"    if (line.front() != \'#\') {","class":"linePartCov","hits":"1","possible_hits":"5",},
{"lineNum":"  100","line":"      std::stringstream ss(line);","class":"linePartCov","hits":"1","possible_hits":"5",},
{"lineNum":"  101","line":"      Object p;","class":"linePartCov","hits":"1","possible_hits":"4",},
{"lineNum":"  102","line":"      ss >> p;","class":"linePartCov","hits":"1","possible_hits":"5",},
{"lineNum":"  103","line":"      objects.push_back(p);","class":"linePartCov","hits":"1","possible_hits":"5",},
{"lineNum":"  104","line":"    }","class":"linePartCov","hits":"1","possible_hits":"10",},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"  // Return the extracted objects"},
{"lineNum":"  107","line":"  return objects;","class":"linePartCov","hits":"1","possible_hits":"5",},
{"lineNum":"  108","line":"}","class":"linePartCov","hits":"1","possible_hits":"10",},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"// Wrappers to parse files and return containers of various objects"},
{"lineNum":"  111","line":"auto get_prices() { return get_objects<coin>(\"prices.csv\"); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  112","line":"auto get_prospects() { return get_objects<prospect>(\"prospects.csv\"); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":"auto get_positions() { return get_objects<position>(\"positions.csv\"); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  114","line":"auto get_purged_positions() { return get_objects<position>(\"purge.csv\"); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  115","line":"auto get_closed_positions() { return get_objects<position>(\"closed.csv\"); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":"auto get_reviewed_positions() { return get_objects<position>(\"review.csv\"); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  117","line":"auto get_refreshed_positions() { return get_objects<position>(\"refresh.csv\"); }","class":"lineCov","hits":"2","possible_hits":"2",},
{"lineNum":"  118","line":"auto get_final_positions() { return get_objects<position>(\"consolidate.csv\"); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"auto get_symbols() { return get_objects<std::string>(\"symbols.csv\"); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"const std::string stats_file = \"stats.txt\";","class":"lineCov","hits":"2","possible_hits":"2",},
{"lineNum":"  122","line":"auto get_stats() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"  const auto stats = get_objects<unsigned long>(stats_file);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  124","line":"  return stats.size() ? stats.front() : 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"auto put_stats(const unsigned long &stat) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"  std::ofstream out(stats_file);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"  if (out.good())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"    out << stat;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "review.o", "date" : "2018-04-21 13:47:42", "instrumented" : 69, "covered" : 38,};
var merged_data = [];
